
// Config vars

$mhc-blue: 			#2E648D;  // MHC logo brand color
$mhc-blue-lt: 	#B4D9F5;
$mhc-brown: 		#482B12;
$mhc-brown-dk: 	#402915;
$mhc-grey: 			#585757;
$mhc-grey-dk: 	#3F3F3F;
$mhc-white: 		#FFF9F0;

$primary: $mhc-blue;
$secondary: $mhc-blue-lt;
$neutral: $mhc-brown;
$neutral-dark: $mhc-brown-dk;
$text: $mhc-grey;
$text-dark: $mhc-grey-dk;
$base: $mhc-white;
$primary-invert: $mhc-white;
$body-color: $mhc-grey-dk;
$black: #2b2523;

:export {
	primary: $primary;
	secondary: $secondary;
	neutral: $neutral;
	neutralDark: $neutral-dark;
	text: $text;
	textDark: $text-dark;
	base: $base;
	primaryInvert: $primary-invert;
	bodyColor: $body-color;
	black: $black;
}

@mixin sans {
	font-family: 'Noto Sans', -apple-system, BlinkMacSystemFont, Arial, sans;
}
@mixin serif {
	font-family: 'Noto Serif', Garamond, serif;
}

/* MIXIN - LINEAR-INTERPOLATION */
@function linear-interpolation($map,$xtra:0px) {
	$keys: map-keys($map);
	@if (length($keys) != 2) {
		@error 'linear-interpolation() $map must be exactly 2 values';
	}
	// The slope
	$m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) / (nth($keys, 2) - nth($keys, 1));

	// The y-intercept
	$b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

	// Determine if the sign should be positive or negative
	$sign: '+';
	@if ($b < 0) {
		$sign: '-';
		$b: abs($b);
	}

	@if ($xtra == 0px) {
		@return calc(#{$m * 100}vw #{$sign} #{$b});
	} @else {
		@return calc(#{$m * 100}vw #{$sign} #{$b} + #{$xtra});
	}
}


/* HELPER FUNCTION TO ENCODE SVG TO DATA-URL */
/* includes support for defining a color replacements map
		of existing to replacement colors */
@function svg-url($svg, $colormap: false) {
    //  Add namespace if missing
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    @if $colormap {
    	@each $orig, $replace in $colormap {
    		$svg: str-replace($svg, $orig, $replace);
    	}
    }
    //  Chunk up string avoids "stack level too deep" error
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //   Encode
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}

/* HELPER FUNCTION - STR-REPLACE */
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
